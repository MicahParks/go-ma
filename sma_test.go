package ma_test

import (
	"testing"

	"github.com/MicahParks/go-ma"
)

const (
	testPeriod = 10
)

func BenchmarkSMABig_Calculate(b *testing.B) {
	sma, _ := ma.NewSMABig(bigPrices[:testPeriod])

	for _, p := range bigPrices[testPeriod:] {
		sma.Calculate(p)
	}
}

func BenchmarkSMAFloat_Calculate(b *testing.B) {
	sma, _ := ma.NewSMAFloat(prices[:testPeriod])

	for i, p := range prices[testPeriod:] {
		if smaResults[i] != sma.Calculate(p) {
			b.FailNow()
		}
	}
}

func TestSMABig_Calculate(t *testing.T) {
	sma, _ := ma.NewSMABig(bigPrices[:testPeriod])

	for _, p := range bigPrices[testPeriod:] {
		sma.Calculate(p)
	}
}

func TestSMAFloat_Calculate(t *testing.T) {
	sma, _ := ma.NewSMAFloat(prices[:testPeriod])

	for i, p := range prices[testPeriod:] {
		if smaResults[i] != sma.Calculate(p) {
			t.FailNow()
		}
	}
}

var (
	smaResults = []float64{
		440.51200000000005729816621169447898864746093750,
		438.19300000000004047251422889530658721923828125,
		436.64500000000009549694368615746498107910156250,
		434.73600000000004683897714130580425262451171875,
		434.24300000000005184119800105690956115722656250,
		432.18900000000002137312549166381359100341796875,
		430.56700000000000727595761418342590332031250000,
		429.67699999999996407495927996933460235595703125,
		430.99599999999992405719240196049213409423828125,
		434.56299999999993133315001614391803741455078125,
		436.89799999999996771293808706104755401611328125,
		439.53999999999996362021192908287048339843750000,
		441.75499999999993860910763032734394073486328125,
		444.77400000000000090949470177292823791503906250,
		447.34499999999997044142219237983226776123046875,
		450.61599999999998544808477163314819335937500000,
		452.98899999999991905497154220938682556152343750,
		454.00499999999993860910763032734394073486328125,
		452.52999999999991587174008600413799285888671875,
		449.93700000000001182343112304806709289550781250,
		447.68700000000001182343112304806709289550781250,
		445.25100000000003319655661471188068389892578125,
		442.29799999999994497557054273784160614013671875,
		438.72799999999995179678080603480339050292968750,
		435.06800000000004047251422889530658721923828125,
		432.52300000000002455635694786906242370605468750,
		430.74800000000004729372449219226837158203125000,
		429.46200000000010277290130034089088439941406250,
		428.55600000000004001776687800884246826171875000,
		428.20100000000002182787284255027770996093750000,
		425.28199999999998226485331542789936065673828125,
		421.71499999999997498889570124447345733642578125,
		418.44800000000003592504072003066539764404296875,
		415.69400000000007366907084360718727111816406250,
		413.60900000000003728928277269005775451660156250,
		410.58600000000006957634468562901020050048828125,
		407.99100000000009913492249324917793273925781250,
		406.73100000000005138645065017044544219970703125,
		407.75799999999998135535861365497112274169921875,
		409.41199999999997771737980656325817108154296875,
		413.06099999999997862687450833618640899658203125,
		418.40800000000001546140993013978004455566406250,
		424.35299999999995179678080603480339050292968750,
		430.55699999999995952748577110469341278076171875,
		435.80999999999994543031789362430572509765625000,
		441.64799999999996771293808706104755401611328125,
		446.48699999999996634869603440165519714355468750,
		450.06399999999996452970663085579872131347656250,
		452.52599999999995361577020958065986633300781250,
		452.63399999999990086507750675082206726074218750,
		451.58999999999997498889570124447345733642578125,
		450.49599999999998090061126276850700378417968750,
		448.82399999999995543475961312651634216308593750,
		447.04599999999999226929503493010997772216796875,
		445.14600000000001500666257925331592559814453125,
		442.89699999999993451638147234916687011718750000,
	}
)
